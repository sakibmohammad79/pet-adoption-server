// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  password String
  email String @unique 
  role UserRole
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relation fields
  admin Admin?
  adopter Adopter?
  publisher Publisher?

  @@map("users")
}

model Admin{
  id String @id @default(uuid())
  firstName   String
  lastName    String
  gender Gender? 
  birthDate   DateTime?
  email String @unique
  profilePhoto String?
  contactNumber String?
  address String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relation
  user User @relation(fields: [email], references: [email])
  //change table name
  @@map("admins")
}

model Adopter{
  id String @id @default(uuid())
  firstName   String
  lastName    String
  gender Gender?
  birthDate   DateTime?
  email String @unique
  profilePhoto String?
  address String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relation
  user User @relation(fields: [email], references: [email])
  adpotions Adoption[]
  review Review[]
  //change table name
  @@map("adopters")
}

model Publisher{
  id String @id @default(uuid())
  firstName   String
  lastName    String
  gender Gender?
  birthDate   DateTime?
  email String @unique
  profilePhoto String?
  address String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relation
  user User @relation(fields: [email], references: [email])
  pets Pet[]
  review Review[]
  //change table name
  @@map("publishers")
}

model Pet {
  id String @id @default(uuid())
  name   String
  image String
  birthDate   DateTime?
  description String?
  gender Gender
  age Int
  breed String
  weight      Float
  height      Float
  color       String
  size PetSize
  healthStatus HealthStatus
  specialNeeds String?
  published Boolean @default(false)
  status PetAdoptStatus @default(PENDING)
  location String?
  idDeleted Boolean @default(false)
  isAdopt Boolean @default(false)
  isBooked Boolean @default(false)
  publisherId String
  //relation
  publisher Publisher @relation(fields: [publisherId], references: [id])
  adpotion Adoption?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("pets")
}
model Adoption {
  id String @id @default(uuid())
  petId String @unique
  pet Pet @relation(fields: [petId], references: [id])
  adopterId String
  adopter Adopter @relation(fields: [adopterId], references: [id])

  adoptionDate DateTime @default(now())
  @@map("adoptions")
}

model Review {
  id String @id @default(uuid())
  rating Int
  comment String?
  reviewerId String
  
 adopter Adopter? @relation(fields: [reviewerId], references: [id], map: "adopter_review_fkey")

  publisher Publisher? @relation(fields: [reviewerId], references: [id], map: "publisher_review_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum HealthStatus {
  VACCINATED
  SPAYED_NEUTERED
  HEALTHY
  SPECIAL_NEEDS
  UNKNOWN
}

enum PetAdoptStatus {
  PENDING
  REJECTED
  APPROVED
}

enum UserRole {
  ADMIN
  PET_ADOPTER
  PET_PUBLISHER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

